import numpy as np


def Jacobi(A, b, x0, Nmax, tol):
    n = len(b)
    x_sol = np.zeros_like(b)
    error = 10
    count = 0
    while (error > tol and count < Nmax):
        for i in range(n):
            suma = 0
            for j in range(n):
                if j != i:
                    suma += np.dot(A[i, j], x0[j])
            x_sol[i] = (b[i - suma]) / A[i, i]
        print(x_sol)
        count += 1
        error = max(abs(x_sol - x0))
        x0 = np.copy(x_sol)
    return x_sol


A = np.array([[3, -1, 0], [-1, 4, -1], [0, -1, 5]], dtype=float)
b = np.array([2, 3, 5], dtype=float)
tol = 10 ** -6
x0 = np.zeros_like(len(b))


def jacobi_matrices(A, b, tl, x0):
    D = np.diag((np.diag(A)))
    L = D - np.tril(A)
    U = D - np.triu(A)
    Tj = np.dot(np.linalg.inv(D), L + U)
    Cj = np.dot(np.linalg.inv(D), b)
    val_propios, vect_propios = np.linalg.eig(Tj)
    radio = max(abs(val_propios))

    if radio < 1:
        error = 1
        while error > tol:
            x1 = np.dot(Tj, x0) + Cj
            error = np.max(abs(x1 - x0))
            x0 = np.copy(x1)
            print(x1)

    else:
        print("El sistema iterativo no converge con jacobi")


jacobi_matrices(A, b, tol, x0)
