import numpy as np
import time

def gauss_seidel_matrices(A, b, x0=None, max_its=50, tol=1e-6):
  D = np.diag(np.diag(A))
  L =  D - np.tril(A)
  U = D - np.triu(A)

  Tg = np.dot(np.linalg.inv(D-L), U)
  Cg = np.dot(np.linalg.inv(D-L), b)

  if(x0 is None):
    x0 = np.zeros(len(b))

  res = [np.copy(x0)]
  v_propios, vec_propios = np.linalg.eig(Tg)

  radio = max(abs(v_propios))
  if(radio < 1):
    start = time.time()
    error = 1
    k = 0
    while(k < max_its and error > tol):
      x1 = np.dot(Tg, x0)+Cg
      error = np.max(np.abs(x1-x0))
      k += 1
      x0 = np.copy(x1)
      res.append(x0)

    end = time.time()
    print(f"Tiempo de computo Gauss-Seidel Matrices: {end-start:.4f}s")
    return x1, res
  else:
    print("No converge con el metodo de Gauss Seidel")


def gauss_seidel_sumas(A, b, x0=None, max_its=50, tol=1e-6):
  n = len(b)
  if x0 is None:
    x0 = np.zeros(n)
  res = [np.copy(x0)]
  c = 0
  x = x0.copy()
  start = time.time()
  for k in range(max_its):
    c+=1
    x_old = x.copy()
    for i in range(n):
      s1 = sum(A[i, j] * x[j] for j in range(i))
      s2 = sum(A[i, j] * x_old[j] for j in range(i+1, n))
      x[i] = (b[i] - s1 - s2) / A[i, i]
      res.append(x)
    error = np.max(np.abs(x - x_old))
    if error < tol:
      break
  end = time.time()
  print(f"Tiempo de computo Gauss-Seidel Sumas: {end-start:.4f}s")
  return x, res


def jacobi_sumatorias(matrix, vector, x_0=None, max_it=50, tol=1e-6):
  if(x_0 is None):
    x_0 = np.zeros(len(vector)).astype(float)
  res = [np.copy(x_0)]
  n = len(vector)
  x_sol = np.zeros(n).astype(float)
  k = 0
  error = 1
  start = time.time()
  while k < max_it and error > tol:
    for i in range(n):
      summatory = 0
      for j in range(n):
        if i != j:
          summatory += np.dot(matrix[i][j], x_0[j])
      x_sol[i] = (vector[i] - summatory)/matrix[i][i]
      res.append(x_sol)
    error = max(abs(x_sol - x_0))
    x_0 = np.copy(x_sol)
    k += 1

  end = time.time()
  print(f"Tiempo de computo Jacobi Sumas: {end - start :.5f}s")
  return x_sol, res


def jacobi_matrices(A, b, x0=None, max_its=50, tol=1e-6):
  D = np.diag(np.diag(A))
  L =  D - np.tril(A)
  U = D - np.triu(A)

  Tj = np.dot(np.linalg.inv(D), L+U)
  Cj = np.dot(np.linalg.inv(D), b)

  if(x0 is None):
    x0 = np.zeros(len(b))
  res = [np.copy(x0)]
  v_propios, vec_propios = np.linalg.eig(Tj)

  radio = max(abs(v_propios))
  if(radio < 1):
    start = time.time()
    error = 1
    k = 0
    while(k < max_its and error > tol):
      x1 = np.dot(Tj, x0)+Cj
      error = np.max(np.abs(x1-x0))
      k += 1
      x0 = np.copy(x1)
      res.append(x1)

    end = time.time()
    print(f"Tiempo de computo Jacobi Matrices: {end-start:.4f}s")
    return x1, res
  else:
    print("No converge con el metodo de Jacobi")

def Euler (f,a,b,h,yo):
  weu= [yo]
  n=int((b-a)/h)
  for i in range(n):
    weu.append(weu[i]+h*f(a+i*h,weu[i]))
  return weu

def RK4(f, a, b, h, co):
  wrk = [co]
  n = int((b-a)/h)
  for i in range(n):
    k1 = h * f(a + i*h, wrk[i])
    k2 = h * f(a + i*h+ 0.5*h, wrk[i]+0.5*k1)
    k3 = h * f(a + i*h+ 0.5*h, wrk[i]+0.5*k2)
    k4 = h * f(a + (i+1)*h, wrk[i]+k3)
    wrk.append(wrk[i]+(1/6)*(k1 + 2*k2 + 2*k3 + k4))
  return wrk
